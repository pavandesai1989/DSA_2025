https://leetcode.com/problems/linked-list-cycle/description/

brute force:

/*
Definition of singly linked list:
struct ListNode
{
    int val;
    ListNode *next;
    ListNode()
    {
        val = 0;
        next = NULL;
    }
    ListNode(int data1)
    {
        val = data1;
        next = NULL;
    }
    ListNode(int data1, ListNode *next1)
    {
        val = data1;
        next = next1;
    }
};
*/

class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
        ListNode* curr = head;
        unordered_map<ListNode*,int> nodeMap;

        while(curr!=nullptr)
        {
            //check if present in map
            if(nodeMap.find(curr) !=nodeMap.end())
            {
                return true; //cycle exists
            }
            //add to map
            nodeMap[curr] = 1;

            curr = curr->next;
        }
        return false;

    }
};

| Metric           | Value  |
| ---------------- | ------ |
| Time Complexity  | `O(N)` |
| Space Complexity | `O(N)` |

****optimal**
class Solution {
public:
    bool hasCycle(ListNode *head) 
    {
       ListNode* slow = head;
       ListNode* fast = head;

       while(slow!=nullptr && fast!=nullptr && fast->next!=nullptr)
       {
          slow = slow->next;
          fast = fast->next->next;

          if(slow == fast)
          {
            return true;
          }
       }
       return false;
    }
};



****optimal****
