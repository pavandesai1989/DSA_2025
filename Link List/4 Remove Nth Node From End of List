https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/


/*
Definition of singly linked list:
struct ListNode
{
    int val;
    ListNode *next;
    ListNode()
    {
        val = 0;
        next = NULL;
    }
    ListNode(int data1)
    {
        val = data1;
        next = NULL;
    }
    ListNode(int data1, ListNode *next1)
    {
        val = data1;
        next = next1;
    }
};
*/

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
        if(!head) 
           return nullptr;

        ListNode* curr = head;
        int len = 0;
        while(curr!=nullptr)
        {
            len++;
            curr = curr->next;
        }
        if (n == len) ******** imp case *****
        {
            ListNode* temp = head;
            head = head->next;
            delete temp;
            return head;
        }

        int res = len-n;
        curr = head;
        while(curr!=nullptr)
        {
            res--;
            if(res==0)
            {
                break;
            }
            curr = curr->next;
        }

        ListNode* temp = curr->next;
        curr->next = curr->next->next;
        delete temp;
        return head;
    }
};

*****optimal***
Initialize two pointers fast and slow at head.

Advance the fast pointer by n steps:

This ensures that when fast reaches the end, slow is just before the node to delete.

Edge Case:

If fast == nullptr after moving n steps:

This means the node to delete is the head node.

So, move head to head->next and delete the old head.

Traverse till fast->next becomes nullptr:

Both fast and slow move one step at a time.

When fast reaches the last node, slow is just before the node to delete.

Delete the target node:

slow->next is the node to delete.

Update the link and deallocate memory.


/*
Definition of singly linked list:
struct ListNode
{
    int val;
    ListNode *next;
    ListNode()
    {
        val = 0;
        next = NULL;
    }
    ListNode(int data1)
    {
        val = data1;
        next = NULL;
    }
    ListNode(int data1, ListNode *next1)
    {
        val = data1;
        next = next1;
    }
};
*/

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) 
    {
         ListNode* slow = head;
         ListNode* fast = head;

         //move fast till less than n 
         for(int i=0;i<n;i++)
         {
            fast = fast->next;
         }

         //edge case*******
         if(fast == nullptr)
         {
            ListNode* temp = head->next;
            delete head;
            return temp;
         }

         //move till end of list 
         while(fast->next!=nullptr)
         {
            slow = slow->next;
            fast = fast->next;
         }

         ListNode* delnode = slow->next;
         slow->next = slow->next->next;
         delete delnode;
         return head;
    }
};
