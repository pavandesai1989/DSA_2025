
**********brute force****
class Solution {
public:
    vector<int> nextLargerElement(vector<int> arr) 
    {
        int n = arr.size();
        vector<int> res(n,0); //we know size 

        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[j] > arr[i])
                {
                    res[i] = arr[j];
                    break;  //imp we need first greater element
                }
            }
            //if not found assign -1
            if(res[i] == 0)
            {
                res[i] = -1;
            }
        }
        return res;
    }
};

Time Complexity:The time complexity of the code is O(n^2) because of the two nested loops iterating over the array.
Space Complexity:The space complexity of the code is O(n) due to the additional space used by the result vector.


***********optimal************

Next Greater Element
//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to find the next greater element for each element of the array.
    vector<int> nextLargerElement(vector<int>& arr) 
    {
        
        int n=arr.size();
        vector<int> res(n,-1);   //imp else out of bound 
        stack<int> st;
        
        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() && st.top()<=arr[i])
            {
                st.pop();
            }
            
            if(st.empty())
            {
                res[i] = -1;  //dont do push_back else order will change 
            }
            else
            {
                res[i] = st.top();
            }
            
            st.push(arr[i]);
        }
        return res;
    }
};

//{ Driver Code Starts.

int main() {
    int t; // Number of test cases
    cin >> t;
    cin.ignore(); // Ignore the newline after reading t
    while (t--) {
        vector<int> a;
        string input;

        // Reading the entire input line for the array
        getline(cin, input);
        stringstream ss(input);
        int num;
        while (ss >> num)
            a.push_back(num); // Read the array elements from input string

        Solution obj;
        vector<int> result = obj.nextLargerElement(a);

        // Print the result in the required format
        for (int i = 0; i < result.size(); i++) {
            if (i != 0)
                cout << " ";
            cout << result[i];
        }
        cout << endl;        // Ensure new line after each test case output
        cout << "~" << endl; // Ensure new line after each test case output
    }

    return 0;
}

// } Driver Code Ends
