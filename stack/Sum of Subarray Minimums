class Solution {
public:
    vector<int> getNSL(vector<int>& arr,int n)
    {
        vector<int> res(n);
        stack<int> st;
        for(int i=0;i<n;i++)
        {
            while(!st.empty() && arr[i]<arr[st.top()])
            {
                st.pop();
            }

            if(st.empty())
            {
                res[i] = -1;
            }
            else
            {
                res[i] = st.top();
            }

            st.push(i);
        }
        return res;
    }

    vector<int> getNSR(vector<int>& arr,int n)
    {
        vector<int> res(n);
        stack<int> st;
        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() && arr[i]<=arr[st.top()])
            {
                st.pop();
            }

            if(st.empty())
            {
                res[i] = n;
            }
            else
            {
                res[i] = st.top();
            }
            st.push(i);
        }
        return res;
    }

    int sumSubarrayMins(vector<int>& arr) 
    {
        int n = arr.size();

        vector<int> NSL = getNSL(arr,n);
        vector<int> NSR = getNSR(arr,n);

        long long sum = 0;
        long long Mod = 1e9+7;

        for(int i=0;i<n;i++)
        {
            //get no of smaller ele on left
            int ls = i - NSL[i];

            //get no of eles till next smaller 
            int rs = NSR[i] - i;

            long long ways = ls*rs;

            long long localSum = ways*arr[i];

            sum = (sum + localSum)%Mod;
        }
        return sum;
    }
};
