

class Solution {
public:
    void helper(vector<int>& nums,int idx,int target,vector<int> ds,vector<vector<int>>& res)
    {
        if(idx == nums.size())
        {
            if(target == 0)
            {
                res.push_back(ds);
            }
            return;
        }

        //pick case 
        if(nums[idx]<=target)
        {
            ds.push_back(nums[idx]);
            helper(nums,idx,target-nums[idx],ds,res); // as same num can be picked many times call on same idx and target reduces 
            ds.pop_back();
        }

        //not pick case
        helper(nums,idx+1,target,ds,res);
    }

    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> ds;
        helper(candidates,0,target,ds,res);

        return res;
    }
};
