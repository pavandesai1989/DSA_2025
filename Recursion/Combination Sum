class Solution {
public:
    void helper(int idx,vector<int>& nums,vector<int> ds,int target,vector<vector<int>>& res)
    {
        //base case
        if(idx==nums.size())
        {
            if(target == 0)
            {
                res.push_back(ds);
            }
            return;
        }

        if(nums[idx]<=target)
        {
            ds.push_back(nums[idx]);
            //call on same index 
            helper(idx,nums,ds,target-nums[idx],res);

            //backtracking
            ds.pop_back();
        }

        helper(idx+1,nums,ds,target,res);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> ds;
        helper(0,candidates,ds,target,res);
        return res;        
    }
};
