class Solution {
public:
    void helper(int idx,vector<int>& nums,vector<int> ds,int target,vector<vector<int>>& res)
    {
        //base case
        if(target==0)
        {
            res.push_back(ds);
            return;
        }

        //try all indexes
        for(int i=idx;i<nums.size();i++)
        {
            if(i>idx && nums[i]==nums[i-1])
                continue;

            if(nums[idx]>target)
               break;

            ds.push_back(nums[i]);
            helper(i+1,nums,ds,target-nums[i],res);
            ds.pop_back();       
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) 
    {
        vector<vector<int>> res;
        vector<int> ds;
        sort(candidates.begin(),candidates.end());
        helper(0,candidates,ds,target,res);
        return res;
    }
};
