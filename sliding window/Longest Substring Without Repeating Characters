*****brute force*****  o(n*n) space o(n) for the map


class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        if (s.empty())
           return 0;

        int ans=0;
        int n=s.length();
        map<char,int> umap;

        for(int i=0;i<n;i++)
        {
            umap.clear();
            for(int j=i;j<n;j++)
            {
                //check if char is in map
                if(umap.find(s[j])!=umap.end())
                {
                    break;
                }
                else
                {
                    umap.insert({s[j],1});

                    //update answer 
                    if(j-i+1 > ans)
                    {
                        ans = j-i+1;
                    }

                }
            }
        }
        return ans;        
    }
};


***********optimal********
Approach:
keep 2 pointers i and j point to idx 0
as we need to keep track of non duplicate weneed unordered_map - add and read at o(1)
add ele in the map to store its freq
check if its valid substring ( if any char occurance in map is >1 return false as we need substring with no duplicates) if true update res with max(res,j-i+1)
if its not valid we need to reduce the window. reduce count of s[i] from map, if count is 0 delete from map and i++




class Solution {
public:
    int lengthOfLongestSubstring(string s) 
    {
        int start = 0;
        int end = 0;
        int n = s.length();
        char mapp[256] = {-1};
        int ans = INT_MIN;

        while(end<n)
        {
           //check if present in mapp
           while(start<end && mapp[s[end]] == 1)
           {
               //remove elements from start
               mapp[s[start]]--;
               start++;               
           }

           //add in mapp
           mapp[s[end]]++;

           //update answer
           ans = (ans>end-start+1) ? ans : end-start+1;

           end++;
        }
        return ans;
    }
};
