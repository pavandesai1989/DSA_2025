https://www.geeksforgeeks.org/problems/count-occurences-of-anagrams5839/1

**********brute force****









*****sliding window***
//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
// User function template for C++
class Solution {
  public:
    bool checkallzeros(map<char,int> &mp)
    {
        for(auto ele:mp)
        {
            if(ele.second!=0)
            {
                return false;
            }
        }
        return true;
    }
    
    int search(string &pat, string &txt) 
    {
        int n = txt.length();
        int k = pat.length();
        
        int ans=0;
        int L=0,R=0;
        
        //add char of pat in map
        map<char,int> mp;
        for(auto ele:pat)
        {
            mp[ele]++;
        }
        
        while(R<n)
        {
            //reduce count of txt[R] from map
            mp[txt[R]]--;
            
            if(R-L+1 == k)
            {
                if(checkallzeros(mp))
                {
                    ans++;
                }
                
                //reduce window
                mp[txt[L]]++;
                L++;
            }
            R++;
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        string pat, txt;
        cin >> txt >> pat;
        Solution ob;
        auto ans = ob.search(pat, txt);
        cout << ans << "\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends

Time : Overall Complexity:

The loop runs O(n) times, and checkallzeros takes O(size). Therefore, the overall time complexity is:
𝑂
(
𝑛
⋅
𝑠
𝑖
𝑧
𝑒
)
O(n⋅size)
For a fixed character set like lowercase English letters (size = 26), this simplifies to O(n).

The total space complexity is O(size), which simplifies to O(1) for a fixed character set.
