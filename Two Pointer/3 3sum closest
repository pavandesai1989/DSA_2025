

***brute force**
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) 
    {
        int n=nums.size();
        int diff = INT_MAX;
        int res = -1;
        for(int i=0;i<n-2;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                    int sum = nums[i]+nums[j]+nums[k];
                    if(abs(target-sum) < diff)
                    {
                       diff = abs(target-sum);
                       res = sum;
                    }
                }
            }
        }
        return res;
        
    }
};


**********optimal 2 pointer****
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) 
    {
        int n=nums.size();
        //sort the array
        sort(nums.begin(),nums.end());
        int diff = INT_MAX;
        int closestSum=0;

        for(int i=0;i<n-2;i++) //as we need 3 sum closest 
        {
           int l=i+1;
           int r=n-1;

           while(l<r)
           {
              int sum = nums[i]+nums[l]+nums[r];
              if(sum == target)
                return sum;
              else if(abs(sum-target) < diff)
              {
                 diff = abs(sum-target);
                 closestSum = sum;
              }  

              if(sum<target)
                l++;
              else
                r--;  
                 
           }
        }
        return closestSum;        
    }
};
