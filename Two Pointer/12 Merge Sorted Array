brute force
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        int j=0;
        for(int i=m;i<m+n;i++)
        {
            nums1[i] = nums2[j];
            j++;
        }

        sort(nums1.begin(),nums1.end());
        
    }
};


Time : Sorting: 
𝑂
(
(
𝑚
+
𝑛
)
log
⁡
(
𝑚
+
𝑛
)
)
O((m+n)log(m+n)).

The total space complexity is 
𝑂
(
𝑚
+
𝑛
)
O(m+n) due to the sorting step.


*******optimal****2 pointer 
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) 
    {
        int i=m-1;
        int j=n-1;
        int k=m+n-1;

        while(i>=0 && j>=0)
        {
            if(nums2[j]>nums1[i])
            {
                nums1[k] = nums2[j];
                j--;
            }
            else
            {
                nums1[k] = nums1[i];
                i--;
            }
            k--;
        }

        while(j>=0)   ****note all the elements of nums1 are already in place . so we need only j loop code here 
        {
            nums1[k] = nums2[j];
            j--;
            k--;
        }        
    }
};

Total Time Complexity: 
𝑂
(
𝑚
+
𝑛
)
O(m+n).

Total Space Complexity: 
𝑂
(
1
)
O(1).
